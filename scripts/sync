#!/bin/bash
# Links all the dotfiles in the home directory to this repository dotfiles.
# By default, the original dotfiles will be backed up with '*.bak' extension.
# Installs all managed packages.

set -e

# In order to support the script symlink to /usr/local/bin:
# Resolve the bash source to the original script path if running from a symlink.
SCRIPT_PATH=$(realpath "${BASH_SOURCE[0]}")
if [[ -L ${BASH_SOURCE[0]} ]]; then
  SCRIPT_PATH=$(readlink -f ${BASH_SOURCE[0]})
  cd $(dirname "${SCRIPT_PATH}")
fi

SCRIPT_NAME=$(basename "${SCRIPT_PATH}")

ROOT_DIR=$(git rev-parse --show-toplevel)

############################
# Logging
############################

# Coloring constants
__BOLD=$(tput bold)
__GREY=$(tput setaf 244)
__RED=$(tput setaf 1)
__BLUE=$(tput setaf 4)
__YELLOW=$(tput setaf 12)
__ORANGE=$(tput setaf 11)
__EC=$(tput sgr0)

function usage() {
  local exit_code=$1
  cat << EOF
${__BOLD}Usage${__EC}

  ${SCRIPT_NAME} [--force] [--verbose]

${__BOLD}Description${__EC}

  Links all the dotfiles in the home directory to this repository dotfiles.
  By default, the original dotfiles will be backed up with '*.bak' extension.
  Installs homebrew and all managed packages.

${__BOLD}Flags${__EC}

  -h, --help          print usage
  -f, --force         link dotfiles forcefully, without backups
  -v, --verbose       enable verbose logging

EOF
  exit "${exit_code}"
}

LOG_PREFIX=$(printf "${__GREY}dotfiles| %s|${__EC}  " "${SCRIPT_NAME}")
STDOUT_PREFIX="${LOG_PREFIX}(stdout) "
STDERR_PREFIX="${LOG_PREFIX}(stderr) "

exec 3> >(trap "" INT TERM; sed "s/^/${STDOUT_PREFIX}/" >&1)
exec 4>&1
exec 5> >(trap "" INT TERM; sed "s/^/${STDERR_PREFIX}/" >&2)
exec 6>&2

function log::enable_prefix() {
  exec 1>&3
  exec 2>&5
}

function log::disable_prefix() {
  exec 1>&4
  exec 2>&6
}

function log::error() {
  local message=$*
  printf "${LOG_PREFIX}${__RED}ERROR${__EC} %b\n" "${message}" 1>&6
}

function log::info() {
  local message=$*
  printf "${LOG_PREFIX} ${__YELLOW}INFO${__EC} %b\n" "${message}" 1>&4
}

function log::warn() {
  local message=$*
  printf "${LOG_PREFIX} ${__ORANGE}WARN${__EC} %b\n" "${message}" 1>&4
}

function log::debug() {
  local message=$*
  local verbose=${VERBOSE}
  if [[ ${verbose} = true ]]; then
    printf "${LOG_PREFIX}${__BOLD}DEBUG${__EC} %b\n" "${message}" 1>&4
  fi
}

function log::newline() {
  printf "\n" 1>&4
}

function log::fatal() {
  local message=$*
  log::error "${message}"
  exit 1
}

############################
# Input and configuration
############################

FORCE=false
VERBOSE=false

# Parse flags:
# Sadly, not using getopt quite yet: because gnu getopt is only available after setup.
while [[ $# -gt 0 ]]; do
  case $1 in
    -v|-verbose|--verbose) VERBOSE=true; shift;;
    -f|-force|--force) FORCE=true; shift;;
    -h|-help|--help) usage 0;;
    *) log::error "Unknown option: $1"; usage 1;;
  esac
done

# Settings global configurations
export VERBOSE=${VERBOSE}
export FORCE=${FORCE}

function log::header_and_config() {
  cat << EOF

   ########:::'#######::'########:'########:'####:'##:::::::'########::'######::
   ##.... ##:'##.... ##:... ##..:: ##.....::. ##:: ##::::::: ##.....::'##... ##:
   ##:::: ##: ##:::: ##:::: ##:::: ##:::::::: ##:: ##::::::: ##::::::: ##:::..::
   ##:::: ##: ##:::: ##:::: ##:::: ######:::: ##:: ##::::::: ######:::. ######::
   ##:::: ##: ##:::: ##:::: ##:::: ##...::::: ##:: ##::::::: ##...:::::..... ##:
   ##:::: ##: ##:::: ##:::: ##:::: ##:::::::: ##:: ##::::::: ##:::::::'##::: ##:
   ########::. #######::::: ##:::: ##:::::::'####: ########: ########:. ######::
  ........::::.......::::::..:::::..::::::::....::........::........:::......:::

  ${__BOLD}Setup${__EC}
  Version: $(git --no-pager log -1 --format="%H")

EOF
}

############################
# Setup
############################

log::header_and_config
log::enable_prefix

if [[ "$(uname)" != "Darwin" ]]; then
  log::fatal "Detected unsupported operating system: \"${__BOLD}$(uname)${__EC}\" (supported operating systems: MacOS)."
fi

SCRIPT_LINK_PATH="/usr/local/bin/dotfilessync"
if ! [[ -L "${SCRIPT_LINK_PATH}" ]]; then 
  log::debug ln -s "${SCRIPT_PATH}" "${SCRIPT_LINK_PATH}"
  ln -s "${SCRIPT_PATH}" "${SCRIPT_LINK_PATH}"
  log::info "Script is now available from ${SCRIPT_LINK_PATH}"
fi


############################
# Linking
############################

function symlink_to_homedir() {
  local file=$1
  local source="${ROOT_DIR}/${file}"
  local target="${HOME}/${file}"
  local target_backup="${HOME}/${file}.bak"
  log::debug "Link source: ${ROOT_DIR}/${file}"
  log::debug "Link target: ${HOME}/${file}"

  # Remove the backup file if exists.
  if [[ -h ${target_backup} ]]; then
    log::debug rm -rf "${target_backup}"
    rm -rf "${target_backup}"
  fi

  # If the link already exists as expected, return.
  if [[ -h ${target} ]] && [[ $(readlink -f ${target}) == ${source} ]]; then
      log::debug "skipping ${target}: link already exists"
      return
  fi


  # If the file trying to replace exist:
  # When using "--force" delete existing file or directory being linked.
  # Otherwise, move actual file to backup (e.g. .zshrc --> .zshrc.bak).
  if [[ -d ${target} ]] || [[ -f ${target} ]] || [[ -L ${target} ]]; then
      log::debug "${target} already exists"
    if [[ ${FORCE} = true ]]; then
      log::warn "Overriding existing target: ${target}"
      log::debug rm -r "${target}"
      rm -r "${target}" || log::fatal "Failed to remove target: ${target}."
    else
      log::debug mv "${target}" "${target_backup}"
      mv "${target}" "${target_backup}" || log::fatal "Failed to create backup: ${target}."
    fi
  fi

  log::debug ln -s "${source}" "${target}"
  ln -s "${source}" "${target}" || log::fatal "Failed to create symlink: ${target}."
}


CONFIGURATION_FILES=(
  ".config/kitty"
  ".config/nvim"
  ".gitconfig"
  ".gitconfig.razcoen"
  ".tmux.conf"
  ".tmux.conf.local"
  ".zshrc"
  ".zprofile"
)

log::info "Linking with symbolic links all the configuration files to the home directory: ${CONFIGURATION_FILES[*]}."
for file in * "${CONFIGURATION_FILES[@]}"; do
  symlink_to_homedir "${file}"
done

############################
# Packages
############################

command -v brew &> /dev/null ||
  (log::info "Installing homebrew" &&
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)")

log::info "Updating homebrew."
log::debug brew update
brew update

HOMEBREW_TAPS=(
  hashicorp/tap
  messense/macos-cross-toolchains
)

HOMEBREW_PACKAGES=(
  # programming language
  go 
  golangci-lint
  nvm # node.js version manager
  python
  openjdk
  maven
  gradle

  # gcc cross
  x86_64-unknown-linux-gnu
  x86_64-unknown-linux-musl
  aarch64-unknown-linux-gnu
  aarch64-unknown-linux-musl

  # terminal
  ripgrep 
  neovim 
  watch
  rsync
  tmux 
  openssl
  zsh-autosuggestions
  cloudflare/cloudflare/cloudflared
  gnu-getopt
  fd
  fzf
  bat

  # git
  git
  gh
  git-delta

  # cloud
  kubectl 
  kubectx
  helm
  tilt
  docker-credential-helper-ecr
  txn2/tap/kubefwd
  entr
  hashicorp/tap/terraform

  # database
  libpq # Postgres (psql)
)

log::info "Installing homebrew packages: ${HOMEBREW_PACKAGES[*]}."

for tap in "${HOMEBREW_TAPS[@]}"; do
  log::debug brew tap -q "${tap}"
  brew tap -q "${tap}"
done

log::debug brew install -q "${HOMEBREW_PACKAGES[@]}"
brew install -q "${HOMEBREW_PACKAGES[@]}"

log::info "Upgrading homebrew packages."
log::debug brew upgrade
brew upgrade

GO_PACKAGES=(
  github.com/nishanths/license/v5@latest
)

log::info "Installing go packages: ${GO_PACKAGES[*]}."

for package in "${GO_PACKAGES[@]}"; do
  log::debug go install "${package}"
  go install "${package}"
done


# if gh auth status &> /dev/null; then
#   log::debug gh auth login
#   gh auth login
# fi
